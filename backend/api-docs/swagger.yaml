openapi: 3.0.0
info:
  title: Ramora Wallet API
  description: API documentation for Ramora Wallet
  version: 1.0.0
  contact:
    name: Ramora Wallet Team
    email: roaelsayed@hotmail.com

servers:
  - url: http://localhost:5001/api
    description: Local development server


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        status:
          type: string
          enum: [active, suspended]
        balance:
          type: number
          format: float
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/Bucket'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Bucket:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
        amount:
          type: number
          format: float

    Transaction:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "507f1f77bcf86cd799439011"
        sender:
          type: string
          description: MongoDB ObjectId of the sender
          example: "507f1f77bcf86cd799439011"
        receiver:
          type: string
          description: MongoDB ObjectId of the receiver
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          format: float
          minimum: 0.01
          description: Transaction amount (must be positive)
        type:
          type: string
          enum: [send, request, deposit]
          description: Transaction type
        status:
          type: string
          enum: [pending, completed, rejected]
          description: Transaction status
        note:
          type: string
          maxLength: 200
          description: Optional note for the transaction
        reference:
          type: string
          description: Optional unique reference for the transaction
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - username
                - email
                - phoneNumber
                - password
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
                phoneNumber:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /users/login:
    post:
      summary: Login user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId
            example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'

    put:
      summary: Update user
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phoneNumber:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'

    delete:
      summary: Delete user
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId
            example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /wallet/{userId}/send/{receiverUsername}:
    post:
      summary: Send money to another user
      tags: [Wallet]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the sender
            example: "507f1f77bcf86cd799439011"
        - name: receiverUsername
          in: path
          required: true
          schema:
            type: string
            description: Username of the receiver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                  description: Amount to send (must be positive)
                note:
                  type: string
                  maxLength: 200
                  description: Optional note for the transaction
      responses:
        '200':
          description: Money sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Money sent successfully"
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '400':
          description: Error in sending money
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Your balance is not enough"

  /wallet/{userId}/request/{receiverUsername}:
    post:
      summary: Request money from another user
      tags: [Wallet]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId
            example: "507f1f77bcf86cd799439011"
        - name: receiverUsername
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  format: float
                note:
                  type: string
      responses:
        '200':
          description: Money request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  transaction:
                    $ref: '#/components/schemas/Transaction'

  /wallet/{userId}/add-balance:
    post:
      summary: Add money to wallet
      tags: [Wallet]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                  description: Amount to add to wallet (must be positive)
      responses:
        '200':
          description: Balance added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Balance added successfully"
                  newBalance:
                    type: number
                    format: float
                    description: Updated wallet balance
                  transaction:
                    $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid amount or other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Amount must be greater than zero"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /buckets/{userId}/buckets:
    get:
      summary: Get user's buckets
      tags: [Buckets]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: List of user's buckets and balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  buckets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bucket'
                  balance:
                    type: number
                    format: float
                    description: User's total balance
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

    post:
      summary: Create a new bucket
      tags: [Buckets]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bucketName
              properties:
                bucketName:
                  type: string
                  description: Name of the new bucket (cannot be 'others')
                amount:
                  type: number
                  format: float
                  minimum: 0
                  description: Initial amount for the bucket (defaults to 0)
      responses:
        '200':
          description: Bucket created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bucket created successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bucket name is required"

  /buckets/{userId}/buckets/{bucketId}:
    put:
      summary: Update a bucket
      tags: [Buckets]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the bucket subdocument
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the bucket (cannot be 'others')
                amount:
                  type: number
                  format: float
                  minimum: 0
                  description: New amount for the bucket
      responses:
        '200':
          description: Bucket updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bucket updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "At least one field (name or amount) must be provided"
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bucket not found"

    delete:
      summary: Delete a bucket
      tags: [Buckets]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the bucket subdocument
            example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Bucket deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Bucket deleted successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: Bucket not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bucket not found"

  /buckets/{userId}/buckets/reset:
    post:
      summary: Reset all buckets
      tags: [Buckets]
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: MongoDB ObjectId of the user
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newBalance
              properties:
                newBalance:
                  type: number
                  format: float
                  minimum: 0
                  description: New balance to set for the default bucket
      responses:
        '200':
          description: Buckets reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Buckets reset successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Balance cannot be negative"
